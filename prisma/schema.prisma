// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// to reset db
// npx prisma migrate reset

// to generate
// npx prisma generate

// to push
// npx prisma db push
generator client {
  provider = "prisma-client-js"
}

// Some databases, such as MongoDB or PlanetScale, do not support foreign keys. Additionally, in some cases developers may prefer not to use foreign keys in their relational database that usually does support foreign keys. For these situations, Prisma offers the prisma relation mode, which emulates some properties of relations in relational databases. When you use Prisma Client with the prisma relation mode enabled, the behavior of queries is identical or similar, but referential actions and some constraints are handled by the Prisma engine rather than in the database.

// There are performance implications to emulation of referential integrity and referential actions in Prisma Client. In cases where the underlying database supports foreign keys, it is usually the preferred choice


datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// NOTE: a bit different from the vid
model Store {
  id            String        @id @default(uuid())
  name          String
  userId        String
  billboards    Billboard[]   @relation("StoreToBillboard")
  categories    Category[]    @relation("StoreToCategory")
  sizes         Size[]        @relation("StoreToSize")
  colors         Color[]        @relation("StoreToColor")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

}

model Billboard {
  id                String      @id @default(uuid())

  // The prisma relation mode does not use foreign keys, so no indexes are created when you use Prisma Migrate or db push to apply changes to your database. You instead need to manually add an index on your relation scalar fields with the @@index attribute (or the @unique, @@unique or @@id attributes, if applicable).
  store             Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories        Category[]  @relation("BillboardToCategory")
  storeId           String
  label             String
  imageUrl          String 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([storeId])
}


model Category {
  id          String      @id @default(uuid()) 
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  storeId     String
  billboard   Billboard   @relation("BillboardToCategory", fields: [billboardId], references: [id])
  billboardId String
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String    @id @default(uuid())
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  storeId     String
  name        String
  value       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}


model Color {
  id          String    @id @default(uuid())
  store       Store     @relation("StoreToColor", fields: [storeId], references: [id])
  storeId     String
  name        String
  value       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}